// Generated by gencpp from file path_planning_msg/pp_msgResponse.msg
// DO NOT EDIT!


#ifndef PATH_PLANNING_MSG_MESSAGE_PP_MSGRESPONSE_H
#define PATH_PLANNING_MSG_MESSAGE_PP_MSGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_planning_msg
{
template <class ContainerAllocator>
struct pp_msgResponse_
{
  typedef pp_msgResponse_<ContainerAllocator> Type;

  pp_msgResponse_()
    : plan()  {
    }
  pp_msgResponse_(const ContainerAllocator& _alloc)
    : plan(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _plan_type;
  _plan_type plan;





  typedef boost::shared_ptr< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> const> ConstPtr;

}; // struct pp_msgResponse_

typedef ::path_planning_msg::pp_msgResponse_<std::allocator<void> > pp_msgResponse;

typedef boost::shared_ptr< ::path_planning_msg::pp_msgResponse > pp_msgResponsePtr;
typedef boost::shared_ptr< ::path_planning_msg::pp_msgResponse const> pp_msgResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planning_msg::pp_msgResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_planning_msg::pp_msgResponse_<ContainerAllocator1> & lhs, const ::path_planning_msg::pp_msgResponse_<ContainerAllocator2> & rhs)
{
  return lhs.plan == rhs.plan;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_planning_msg::pp_msgResponse_<ContainerAllocator1> & lhs, const ::path_planning_msg::pp_msgResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_planning_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d00db495743883c1d9a4cf3d0844ceac";
  }

  static const char* value(const ::path_planning_msg::pp_msgResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd00db495743883c1ULL;
  static const uint64_t static_value2 = 0xd9a4cf3d0844ceacULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planning_msg/pp_msgResponse";
  }

  static const char* value(const ::path_planning_msg::pp_msgResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] plan\n"
;
  }

  static const char* value(const ::path_planning_msg::pp_msgResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plan);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pp_msgResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planning_msg::pp_msgResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planning_msg::pp_msgResponse_<ContainerAllocator>& v)
  {
    s << indent << "plan[]" << std::endl;
    for (size_t i = 0; i < v.plan.size(); ++i)
    {
      s << indent << "  plan[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.plan[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNING_MSG_MESSAGE_PP_MSGRESPONSE_H
